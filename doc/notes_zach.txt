Big ideas
==========
- High mastery on two champions is an indicator that someone with high mastery on one of them would like to play the other
- Find new champions to play based on what you already like to play (what you have high mastery on)
  - I love Wukong, so I should play...
  - I have high mastery with these 3 champions, so I should play...
- Now I've found a champ to play, how should I play it?
  - Some sort of simpler/cleaner champion.gg interface: which lanes is the champ played in, what do high mastery people build, what do high winrate people build, what runes/masteries/etc.

Homepage
==========
- Search by champion or summoner
- Top champions by most total mastery points
- Top champions by most dedicated following (basically mastery points / people who play the champion, e.g. Heimer, not many people play him but those that do are likely to have high master)

Summoner page
==========
- Show top 5 (or whatever) champions you've mastered and recommendations of what you should play based on that
  - Clicking on any champion takes you to that champion's page

Champion page
==========
- Master-based recommendations based on this champion
- Simplified champion.gg information (builds/etc.) but based on what high-mastery players build
- If this is a champion you've played, it would be cool to show how you usually build it to compare to other players' builds




Summoner
=========
mastery_points
first_match_on = day of first match or day mastery was introduced, whichever was later
mastery_rate = mastery_points / days since first_match_on

MasteryEntries
==========
summoner_id
champion_id
champion_points
mastery_rate = champion_points / days since champ released or summoner first_match_on, whichever is later
devotion = mastery_rate / summoner mastery_rate
weighted_devotion = devotion * champion mastery_points # means more if you've played champ a lot

Champions
==========
champion_id
global_interest = all of champion's points / all mastery points total
global_devotion = all of champion's devotion / all devotion total


mastery_points = 1,000,000
days = 10
mastery_rate = 100,000 # average points per day

wukong champion_points = 500,000
mastery_rate = 500,000 / 2 = 250,000
devotion = 250,000 / 100,000 = 2.5 # huge devotion in small amount of time

akali champion_points = 500,000
mastery_rate = 500,000 / 10 = 50,000
devotion = 50,000 / 100,000 = 0.5 # less devotion, played as much as wukong but over more time




CREATE OR REPLACE FUNCTION summoner_mastery_rate() RETURNS trigger
AS $summoner_mastery_rate$
    DECLARE
        days_since_first_mastery integer;

    BEGIN
        days_since_first_mastery = now()::date - NEW.first_mastery_on;

        IF (NEW.mastery_points != OLD.mastery_points) THEN
            NEW.mastery_rate := NEW.mastery_points::float / days_since_first_mastery;
        END IF;

        RETURN NEW;
    END;
$summoner_mastery_rate$ LANGUAGE plpgsql;

CREATE TRIGGER summoner_mastery_rate BEFORE INSERT OR UPDATE ON summoners
    FOR EACH ROW EXECUTE PROCEDURE summoner_mastery_rate();



CREATE OR REPLACE FUNCTION champion_mastery_fields() RETURNS trigger
AS $champion_mastery_fields$
    DECLARE
        days_since_first_mastery integer;

    BEGIN
        IF (NEW.champion_points != OLD.champion_points) THEN
            SELECT * INTO STRICT summoner
                FROM summoners WHERE summoners.id = NEW.summoner_id;

            SELECT max(x) INTO STRICT d
                FROM unnest(ARRAY[NEW.release_date, summoner.first_mastery_on]);

            days_since_first_mastery = now()::date - d;

            NEW.mastery_rate := NEW.champion_points::float / days_since_first_mastery;
            NEW.devotion     := NEW.mastery_rate / summoner.mastery_rate;
            NEW.weighted_devotion := NEW.devotion * NEW.champion_points;
        END IF;

        RETURN NEW;
    END;
$champion_mastery_fields$ LANGUAGE plpgsql;

CREATE TRIGGER champion_mastery_fields BEFORE INSERT OR UPDATE ON champion_masteries
    FOR EACH ROW EXECUTE PROCEDURE champion_mastery_fields();
